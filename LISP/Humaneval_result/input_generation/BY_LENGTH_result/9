Based on the provided API method and input specification, we can write test cases in JUnit format to test the `by_length` method in the `BY_LENGTH` class. 

Here is the code to instantiate the objects and the required import statements:

```java
import java.util.ArrayList;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BY_LENGTHTest {

    @Test
    public void testByLength_1() {
        ArrayList<Integer> input = new ArrayList<>();
        input.add(1);
        input.add(3);
        input.add(2);
        input.add(5);
        input.add(4);
        
        ArrayList<String> expected = new ArrayList<>();
        expected.add("One");
        expected.add("Two");
        expected.add("Three");
        expected.add("Four");
        expected.add("Five");
        
        ArrayList<String> result = BY_LENGTH.by_length(input);
        
        assertEquals(expected, result);
    }

    @Test
    public void testByLength_2() {
        ArrayList<Integer> input = new ArrayList<>();
        input.add(9);
        input.add(7);
        input.add(6);
        input.add(8);
        
        ArrayList<String> expected = new ArrayList<>();
        expected.add("Six");
        expected.add("Seven");
        expected.add("Eight");
        expected.add("Nine");
        
        ArrayList<String> result = BY_LENGTH.by_length(input);
        
        assertEquals(expected, result);
    }
}
```

In the test cases above, we are testing the `by_length` method with different input scenarios to ensure that it correctly maps the integers to their corresponding strings based on the `digit_map` and returns the expected result.