Based on the provided API method and input specification, we can write test cases in JUnit format to test the `by_length` method in the `BY_LENGTH` class. We need to create instances of `a` which contains integers that are mapped in the `digit_map` and are sorted in descending order.

Here is the JUnit test code with the required import statements:

```java
import java.util.ArrayList;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Test_BY_LENGTH {
    
    @Test
    public void testByLength_1() {
        ArrayList<Integer> a = new ArrayList<>();
        a.add(5);
        a.add(2);
        a.add(9);
        a.add(4);
        
        ArrayList<String> expected = new ArrayList<>();
        expected.add("Nine");
        expected.add("Five");
        expected.add("Four");
        expected.add("Two");
        
        ArrayList<String> result = BY_LENGTH.by_length(a);
        
        assertEquals(expected, result);
    }
    
    @Test
    public void testByLength_2() {
        ArrayList<Integer> a = new ArrayList<>();
        a.add(3);
        a.add(7);
        a.add(1);
        
        ArrayList<String> expected = new ArrayList<>();
        expected.add("Seven");
        expected.add("Three");
        expected.add("One");
        
        ArrayList<String> result = BY_LENGTH.by_length(a);
        
        assertEquals(expected, result);
    }
}
```

In the above code, we have created two test cases to test the `by_length` method with different input scenarios. The test cases create instances of `a` with integers that are mapped in the `digit_map` and are sorted in descending order. The expected output is also defined based on the input. The `assertEquals` method is used to compare the expected output with the actual result obtained from the method.