Based on the provided API method and input specification, we can write test cases in JUnit format as follows:

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class MAX_FILLTest {

    @Test
    public void testMaxFill_WithZeroBucketCapacity() {
        int[][] grid = {{1, 2, 3}, {4, 5, 6}};
        int bucket_capacity = 0;
        int result = MAX_FILL.max_fill(grid, bucket_capacity);
        assertEquals(0, result);
    }

    @Test
    public void testMaxFill_WithNonZeroBucketCapacity() {
        int[][] grid = {{1, 2, 3}, {4, 5, 6}};
        int bucket_capacity = 2;
        int result = MAX_FILL.max_fill(grid, bucket_capacity);
        assertEquals(6, result);
    }
}
```

In the above test cases, we have covered scenarios where the `bucket_capacity` is zero and non-zero. The `grid` contains two rows with three elements each for testing purposes.