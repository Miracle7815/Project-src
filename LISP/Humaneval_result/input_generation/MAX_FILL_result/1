Based on the provided API method and input specification, we can write test cases in JUnit format as follows:

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class MAX_FILLTest {

    @Test
    public void testMaxFillWithNullGrid() {
        int[][] grid = null;
        int bucket_capacity = 5;
        int result = MAX_FILL.max_fill(grid, bucket_capacity);
        assertEquals(0, result);
    }

    @Test
    public void testMaxFillWithNonEmptyGrid() {
        int[][] grid = {{3, 4, 2}, {1, 5, 6}};
        int bucket_capacity = 4;
        int result = MAX_FILL.max_fill(grid, bucket_capacity);
        assertEquals(4, result);
    }

    @Test
    public void testMaxFillWithEmptyGrid() {
        int[][] grid = {};
        int bucket_capacity = 3;
        int result = MAX_FILL.max_fill(grid, bucket_capacity);
        assertEquals(0, result);
    }
}
```

In the above test cases, we have covered scenarios for a null grid, a non-empty grid, and an empty grid with different bucket capacities.