Based on the provided API method and input specification, we can write test cases in JUnit format as follows:

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class MAX_FILLTest {

    @Test
    public void testMaxFill_WithEmptyGrid() {
        int[][] grid = new int[0][0];
        int bucket_capacity = 5;
        int result = MAX_FILL.max_fill(grid, bucket_capacity);
        assertEquals(0, result);
    }

    @Test
    public void testMaxFill_WithNonEmptyGrid() {
        int[][] grid = {{3, 4, 2}, {1, 5, 6}};
        int bucket_capacity = 5;
        int result = MAX_FILL.max_fill(grid, bucket_capacity);
        assertEquals(4, result);
    }

    @Test
    public void testMaxFill_WithDifferentBucketCapacity() {
        int[][] grid = {{2, 2, 2}, {2, 2, 2}};
        int bucket_capacity = 3;
        int result = MAX_FILL.max_fill(grid, bucket_capacity);
        assertEquals(3, result);
    }
}
```

In the above test cases, we have covered scenarios with an empty grid, a non-empty grid, and different bucket capacities to test the `max_fill` method from the `MAX_FILL` class.