Based on the provided API method and input specification, we can write test cases using JUnit. We need to create instances of `strings` and `substring` based on the input specification.

Here is the JUnit test code with the required import statements:

```java
import java.util.ArrayList;
import java.util.List;

public class Test_FILTER_BY_SUBSTRING {
    
    @Test
    public void testFilterBySubstring_1() {
        List<String> strings = new ArrayList<>();
        strings.add("apple");
        strings.add("banana");
        strings.add("cherry");
        
        String substring = "an";
        
        List<String> result = FILTER_BY_SUBSTRING.filter_by_substring(strings, substring);
        
        List<String> expected = new ArrayList<>();
        expected.add("banana");
        
        assertEquals(expected, result);
    }
    
    @Test
    public void testFilterBySubstring_2() {
        List<String> strings = new ArrayList<>();
        strings.add("hello");
        strings.add("world");
        strings.add("java");
        
        String substring = "xyz";
        
        List<String> result = FILTER_BY_SUBSTRING.filter_by_substring(strings, substring);
        
        List<String> expected = new ArrayList<>();
        
        assertEquals(expected, result);
    }
}
```

In the above code:
- We import the necessary classes.
- We create two test cases, one where the `substring` is present in some strings and one where the `substring` is not present in any strings.
- We compare the expected output with the result obtained from the method.