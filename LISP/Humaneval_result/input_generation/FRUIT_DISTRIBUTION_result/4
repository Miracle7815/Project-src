Based on the provided API method and input specification, we can write test cases in JUnit format as follows:

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TestFRUIT_DISTRIBUTION {

    @Test
    public void testFruitDistribution_InvalidCharacters() {
        String s = "10 apples 5 oranges 3 bananas";
        int n = 20;
        int result = FRUIT_DISTRIBUTION.fruit_distribution(s, n);
        assertEquals(2, result);
    }

    @Test
    public void testFruitDistribution_AllInvalidCharacters() {
        String s = "apples oranges bananas";
        int n = 15;
        int result = FRUIT_DISTRIBUTION.fruit_distribution(s, n);
        assertEquals(15, result);
    }

    @Test
    public void testFruitDistribution_NoInvalidCharacters() {
        String s = "5 3 2";
        int n = 10;
        int result = FRUIT_DISTRIBUTION.fruit_distribution(s, n);
        assertEquals(0, result);
    }
}
```

In the above test cases, we are testing the `fruit_distribution` method with different scenarios where the input string `s` contains invalid characters that cannot be parsed to integers.