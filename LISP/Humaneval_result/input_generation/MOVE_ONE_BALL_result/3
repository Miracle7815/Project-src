Based on the provided API method and input specification, we can write test cases using JUnit. We need to create instances of `ArrayList<Integer>` for the `arr` parameter.

Here is an example of how we can write test cases for the `move_one_ball` method:

```java
import java.util.ArrayList;
import org.junit.Test;
import static org.junit.Assert.*;

public class MOVE_ONE_BALLTest {

    @Test
    public void testMoveOneBall_emptyList() {
        ArrayList<Integer> arr = new ArrayList<>();
        assertTrue(MOVE_ONE_BALL.move_one_ball(arr));
    }

    @Test
    public void testMoveOneBall_sortedList() {
        ArrayList<Integer> arr = new ArrayList<>();
        arr.add(1);
        arr.add(2);
        arr.add(3);
        assertTrue(MOVE_ONE_BALL.move_one_ball(arr));
    }

    @Test
    public void testMoveOneBall_unsortedList() {
        ArrayList<Integer> arr = new ArrayList<>();
        arr.add(3);
        arr.add(1);
        arr.add(2);
        assertFalse(MOVE_ONE_BALL.move_one_ball(arr));
    }
}
```

In the above test cases, we are testing the `move_one_ball` method with an empty list, a sorted list, and an unsorted list to cover different scenarios.