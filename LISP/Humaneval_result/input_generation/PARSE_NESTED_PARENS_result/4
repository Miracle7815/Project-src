Based on the provided API method and input specification, we can write test cases using JUnit. We need to create instances of `paren_string` which contains valid nested parentheses.

Here is an example of how we can write test cases for the `parse_nested_parens` method:

```java
import java.util.List;
import java.util.ArrayList;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Test_PARSE_NESTED_PARENS {

    @Test
    public void testParseNestedParens_1() {
        String paren_string = "(())";
        List<Integer> expected = new ArrayList<>();
        expected.add(2);
        
        List<Integer> result = PARSE_NESTED_PARENS.parse_nested_parens(paren_string);
        
        assertEquals(expected, result);
    }

    @Test
    public void testParseNestedParens_2() {
        String paren_string = "((()))";
        List<Integer> expected = new ArrayList<>();
        expected.add(3);
        
        List<Integer> result = PARSE_NESTED_PARENS.parse_nested_parens(paren_string);
        
        assertEquals(expected, result);
    }
}
```

In the above test cases, we are testing the `parse_nested_parens` method with different valid nested parentheses strings and checking if the output list of maximum depths matches the expected values.