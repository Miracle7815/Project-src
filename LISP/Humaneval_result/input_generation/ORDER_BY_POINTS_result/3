Based on the provided API method and input specification, we can write test cases in JUnit format as follows:

```java
import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class ORDER_BY_POINTS_Test {

    @Test
    public void test_order_by_points_1() {
        Integer[] nums = {123, 45, 678, 9};
        Integer[] expected = {9, 45, 123, 678};
        Integer[] result = ORDER_BY_POINTS.order_by_points(nums);
        assertArrayEquals(expected, result);
    }

    @Test
    public void test_order_by_points_2() {
        Integer[] nums = {5, 2, 8, 1};
        Integer[] expected = {1, 2, 5, 8};
        Integer[] result = ORDER_BY_POINTS.order_by_points(nums);
        assertArrayEquals(expected, result);
    }

    @Test
    public void test_order_by_points_3() {
        Integer[] nums = {111, 222, 333, 444};
        Integer[] expected = {111, 222, 333, 444};
        Integer[] result = ORDER_BY_POINTS.order_by_points(nums);
        assertArrayEquals(expected, result);
    }
}
```

In the above test cases, we are testing the `order_by_points` method with different input scenarios where `nums` contains positive integers only. The expected results are provided based on the logic of the method.