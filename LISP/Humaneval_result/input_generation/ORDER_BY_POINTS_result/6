Based on the provided API method and input specification, we can write test cases in JUnit format as follows:

```java
import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class ORDER_BY_POINTS_Test {

    @Test
    public void test_order_by_points_1() {
        Integer[] nums = {5, -12, 3, -7, 9};
        Integer[] expected = {-12, 3, 5, -7, 9};
        Integer[] result = ORDER_BY_POINTS.order_by_points(nums);
        assertArrayEquals(expected, result);
    }

    @Test
    public void test_order_by_points_2() {
        Integer[] nums = {100, -50, 25, -75, 0};
        Integer[] expected = {-50, 0, 100, 25, -75};
        Integer[] result = ORDER_BY_POINTS.order_by_points(nums);
        assertArrayEquals(expected, result);
    }

    @Test
    public void test_order_by_points_3() {
        Integer[] nums = {8, -8, 88, -88, 888};
        Integer[] expected = {-8, 8, 88, -88, 888};
        Integer[] result = ORDER_BY_POINTS.order_by_points(nums);
        assertArrayEquals(expected, result);
    }
}
```

In the above test cases, we are testing the `order_by_points` method with different input arrays containing duplicate integers. The expected results are defined based on the logic of the method.