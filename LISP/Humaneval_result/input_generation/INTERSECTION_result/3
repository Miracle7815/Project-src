Based on the provided API method and input specification, we can write test cases for the `intersection` method. We need to create instances of `interval1` and `interval2` arrays and test the functionality of the `intersection` method.

Here is the JUnit test code with the required import statements:

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Test_INTERSECTION {
    
    @Test
    public void testIntersection_1() {
        int[] interval1 = {3, 7};
        int[] interval2 = {5, 10};
        String result = INTERSECTION.intersection(interval1, interval2);
        assertEquals("YES", result);
    }
    
    @Test
    public void testIntersection_2() {
        int[] interval1 = {10, 15};
        int[] interval2 = {5, 8};
        String result = INTERSECTION.intersection(interval1, interval2);
        assertEquals("NO", result);
    }
    
    @Test
    public void testIntersection_3() {
        int[] interval1 = {2, 5};
        int[] interval2 = {3, 7};
        String result = INTERSECTION.intersection(interval1, interval2);
        assertEquals("YES", result);
    }
}
```

In the above test cases, we are testing the `intersection` method with different sets of `interval1` and `interval2` arrays to cover different scenarios as per the input specification.