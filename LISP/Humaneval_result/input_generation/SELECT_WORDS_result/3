Based on the provided API method and input specification, we can write test cases to cover different scenarios. We need to create instances of `s` and `n` to test the `select_words` method. Here are some JUnit test cases with the required import statements:

```java
import java.util.ArrayList;

public class Test_SELECT_WORDS {
    
    @Test
    public void testSelectWords_WithExactConsonants() {
        String s = "apple banana orange";
        int n = 3;
        ArrayList<String> expected = new ArrayList<>();
        expected.add("banana");
        
        ArrayList<String> result = SELECT_WORDS.select_words(s, n);
        
        assertEquals(expected, result);
    }
    
    @Test
    public void testSelectWords_NoMatchingWords() {
        String s = "hello world";
        int n = 4;
        ArrayList<String> expected = new ArrayList<>();
        
        ArrayList<String> result = SELECT_WORDS.select_words(s, n);
        
        assertEquals(expected, result);
    }
    
    @Test
    public void testSelectWords_MultipleMatchingWords() {
        String s = "elephant tiger lion";
        int n = 3;
        ArrayList<String> expected = new ArrayList<>();
        expected.add("elephant");
        expected.add("tiger");
        
        ArrayList<String> result = SELECT_WORDS.select_words(s, n);
        
        assertEquals(expected, result);
    }
}
```

In these test cases, we cover scenarios where there are words with the exact number of consonants equal to `n`, no matching words, and multiple matching words in the input string `s`.